---
import { type CollectionEntry, getCollection } from "astro:content";
import BaseLayout from "../../layouts/BaseLayout.astro";
import Button from "../../components/Button.astro";
import FormattedDate from "../../components/FormattedDate.astro";
import PostPreview from "../../components/PostPreview.astro";
import Subscribe from "../../components/Subscribe.astro";
import { sortItemsByDateDesc } from "../../utils/data-utils";
import { slugify } from "../../utils/common-utils";

export async function getStaticPaths() {
    const posts = (await getCollection("blog")).sort(sortItemsByDateDesc);
    const postCount = posts.length;
    return posts.map((post: { slug: any }, index: number) => ({
        params: { slug: post.slug },
        props: {
            post,
            prevPost: index + 1 !== postCount ? posts[index + 1] : null,
            nextPost: index !== 0 ? posts[index - 1] : null,
        },
    }));
}

type Props = {
    post: CollectionEntry<"blog">;
    prevPost: CollectionEntry<"blog">;
    nextPost: CollectionEntry<"blog">;
};

const { href } = Astro.url;
const { post, prevPost, nextPost } = Astro.props;
const { title, publishDate, updatedDate, excerpt, tags = [], seo } = post.data;
const { Content } = await post.render();
---

<BaseLayout
    title={seo?.title ?? title}
    description={seo?.description ?? excerpt}
    image={seo?.image}
    pageType="article"
    showHeader={false}
>
    <article class="max-w-3xl px-4 pt-6 lg:pt-10 pb-12 sm:px-6 lg:px-8 mx-auto">
        <header class="mb-8">
            <h1 class="text-4xl font-extrabold tracking-tight sm:text-5xl">{title}</h1>
            <div class="mt-4 text-sm">
                <FormattedDate date={publishDate} />
                {
                    updatedDate && (
                        <>
                            {" "}
                            <span>
                                (Updated on <FormattedDate date={updatedDate} />)
                            </span>
                        </>
                    )
                }
            </div>
        </header>
        {
            seo?.image && (
                <figure class="mb-8">
                    <img
                        class="max-w-none object-cover rounded-xl w-full h-96 sm:h-144 md:h-192 lg:h-256 xl:h-320"
                        src={
                            seo.image.src.startsWith("/")
                                ? import.meta.env.BASE_URL + seo.image.src
                                : import.meta.env.BASE_URL + `/${seo.image.src}`
                        }
                        alt={seo.image.alt}
                    />
                    <figcaption class="mt-3 text-sm text-center">
                        {seo.image.alt}
                    </figcaption>
                </figure>
            )
        }
        <div class="max-w-none prose-lg leading-relaxed mb-12">
            <Content />
        </div>
        <div class="mt-8 flex flex-wrap items-center gap-6 text-sm justify-between sm:mt-12 sm:text-base">
            {
                tags.length > 0 && (
                    <div class="flex flex-wrap gap-x-5 gap-y-1 text-sm">
                        {tags.map((tag: any) => (
                            <a
                                class="text-main hover:underline"
                                href={`/tags/${slugify(tag)}`}
                            >
                                #{tag}
                            </a>
                        ))}
                    </div>
                )
            }
            <Button
                class="copy-url-button"
                aria-label="Copy link"
                data-url={href}
                data-tooltip-default="Copy link"
                data-tooltip-success="Copied"
            >
                Share
            </Button>
        </div>
    </article>
    {
        (prevPost || nextPost) && (
            <div class="mt-16 sm:mt-24 pt-12 border-t">
                <h2 class="mb-12 text-xl sm:text-2xl">Read Next</h2>
                {nextPost && (
                    <PostPreview
                        post={nextPost}
                        class="mb-10 sm:mb-12"
                        headingLevel="h3"
                    />
                )}
                {prevPost && (
                    <PostPreview
                        post={prevPost}
                        class="mb-10 sm:mb-12"
                        headingLevel="h3"
                    />
                )}
            </div>
        )
    }
</BaseLayout>

<script>
    document.addEventListener("astro:page-load", () => {
        const copyUrlButton = document.querySelector(
            ".copy-url-button",
        ) as HTMLButtonElement;
        copyUrlButton?.addEventListener("click", async () => {
            await copyUrl(copyUrlButton);
        });

        async function copyUrl(button: HTMLButtonElement) {
            let url = button.getAttribute("data-url") || "";
            let label = button.innerText;

            await navigator.clipboard.writeText(url);

            button.innerText = "Copied";

            setTimeout(() => {
                button.innerText = label;
            }, 2500);
        }
    });
</script>
